/**
 * This class is generated by jOOQ
 */
package models.jooq.tables.records


import java.lang.Integer
import java.lang.String
import java.time.LocalDate
import java.time.LocalDateTime

import javax.annotation.Generated

import models.jooq.tables.ThWorklog

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record11
import org.jooq.Row11
import org.jooq.impl.UpdatableRecordImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.6"
  ),
  comments = "This class is generated by jOOQ"
)
class ThWorklogRecord extends UpdatableRecordImpl[ThWorklogRecord](ThWorklog.TH_WORKLOG) with Record11[Integer, Integer, Integer, LocalDate, LocalDate, Integer, String, String, Integer, LocalDateTime, LocalDateTime] {

  /**
   * Setter for <code>workentry_schema.th_worklog.id</code>.
   */
  def setId(value : Integer) : Unit = {
    set(0, value)
  }

  /**
   * Getter for <code>workentry_schema.th_worklog.id</code>.
   */
  def getId : Integer = {
    val r = get(0)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>workentry_schema.th_worklog.worklog_id</code>.
   */
  def setWorklogId(value : Integer) : Unit = {
    set(1, value)
  }

  /**
   * Getter for <code>workentry_schema.th_worklog.worklog_id</code>.
   */
  def getWorklogId : Integer = {
    val r = get(1)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>workentry_schema.th_worklog.user_id</code>.
   */
  def setUserId(value : Integer) : Unit = {
    set(2, value)
  }

  /**
   * Getter for <code>workentry_schema.th_worklog.user_id</code>.
   */
  def getUserId : Integer = {
    val r = get(2)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>workentry_schema.th_worklog.start_date</code>.
   */
  def setStartDate(value : LocalDate) : Unit = {
    set(3, value)
  }

  /**
   * Getter for <code>workentry_schema.th_worklog.start_date</code>.
   */
  def getStartDate : LocalDate = {
    val r = get(3)
    if (r == null) null else r.asInstanceOf[LocalDate]
  }

  /**
   * Setter for <code>workentry_schema.th_worklog.end_date</code>.
   */
  def setEndDate(value : LocalDate) : Unit = {
    set(4, value)
  }

  /**
   * Getter for <code>workentry_schema.th_worklog.end_date</code>.
   */
  def getEndDate : LocalDate = {
    val r = get(4)
    if (r == null) null else r.asInstanceOf[LocalDate]
  }

  /**
   * Setter for <code>workentry_schema.th_worklog.pause_time</code>.
   */
  def setPauseTime(value : Integer) : Unit = {
    set(5, value)
  }

  /**
   * Getter for <code>workentry_schema.th_worklog.pause_time</code>.
   */
  def getPauseTime : Integer = {
    val r = get(5)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>workentry_schema.th_worklog.notes</code>.
   */
  def setNotes(value : String) : Unit = {
    set(6, value)
  }

  /**
   * Getter for <code>workentry_schema.th_worklog.notes</code>.
   */
  def getNotes : String = {
    val r = get(6)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>workentry_schema.th_worklog.editing_reason</code>.
   */
  def setEditingReason(value : String) : Unit = {
    set(7, value)
  }

  /**
   * Getter for <code>workentry_schema.th_worklog.editing_reason</code>.
   */
  def getEditingReason : String = {
    val r = get(7)
    if (r == null) null else r.asInstanceOf[String]
  }

  /**
   * Setter for <code>workentry_schema.th_worklog.update_by</code>.
   */
  def setUpdateBy(value : Integer) : Unit = {
    set(8, value)
  }

  /**
   * Getter for <code>workentry_schema.th_worklog.update_by</code>.
   */
  def getUpdateBy : Integer = {
    val r = get(8)
    if (r == null) null else r.asInstanceOf[Integer]
  }

  /**
   * Setter for <code>workentry_schema.th_worklog.created</code>.
   */
  def setCreated(value : LocalDateTime) : Unit = {
    set(9, value)
  }

  /**
   * Getter for <code>workentry_schema.th_worklog.created</code>.
   */
  def getCreated : LocalDateTime = {
    val r = get(9)
    if (r == null) null else r.asInstanceOf[LocalDateTime]
  }

  /**
   * Setter for <code>workentry_schema.th_worklog.modified</code>.
   */
  def setModified(value : LocalDateTime) : Unit = {
    set(10, value)
  }

  /**
   * Getter for <code>workentry_schema.th_worklog.modified</code>.
   */
  def getModified : LocalDateTime = {
    val r = get(10)
    if (r == null) null else r.asInstanceOf[LocalDateTime]
  }

  // -------------------------------------------------------------------------
  // Primary key information
  // -------------------------------------------------------------------------
  override def key() : Record1[Integer] = {
    return super.key.asInstanceOf[ Record1[Integer] ]
  }

  // -------------------------------------------------------------------------
  // Record11 type implementation
  // -------------------------------------------------------------------------

  override def fieldsRow : Row11[Integer, Integer, Integer, LocalDate, LocalDate, Integer, String, String, Integer, LocalDateTime, LocalDateTime] = {
    super.fieldsRow.asInstanceOf[ Row11[Integer, Integer, Integer, LocalDate, LocalDate, Integer, String, String, Integer, LocalDateTime, LocalDateTime] ]
  }

  override def valuesRow : Row11[Integer, Integer, Integer, LocalDate, LocalDate, Integer, String, String, Integer, LocalDateTime, LocalDateTime] = {
    super.valuesRow.asInstanceOf[ Row11[Integer, Integer, Integer, LocalDate, LocalDate, Integer, String, String, Integer, LocalDateTime, LocalDateTime] ]
  }
  override def field1 : Field[Integer] = ThWorklog.TH_WORKLOG.ID
  override def field2 : Field[Integer] = ThWorklog.TH_WORKLOG.WORKLOG_ID
  override def field3 : Field[Integer] = ThWorklog.TH_WORKLOG.USER_ID
  override def field4 : Field[LocalDate] = ThWorklog.TH_WORKLOG.START_DATE
  override def field5 : Field[LocalDate] = ThWorklog.TH_WORKLOG.END_DATE
  override def field6 : Field[Integer] = ThWorklog.TH_WORKLOG.PAUSE_TIME
  override def field7 : Field[String] = ThWorklog.TH_WORKLOG.NOTES
  override def field8 : Field[String] = ThWorklog.TH_WORKLOG.EDITING_REASON
  override def field9 : Field[Integer] = ThWorklog.TH_WORKLOG.UPDATE_BY
  override def field10 : Field[LocalDateTime] = ThWorklog.TH_WORKLOG.CREATED
  override def field11 : Field[LocalDateTime] = ThWorklog.TH_WORKLOG.MODIFIED
  override def value1 : Integer = getId
  override def value2 : Integer = getWorklogId
  override def value3 : Integer = getUserId
  override def value4 : LocalDate = getStartDate
  override def value5 : LocalDate = getEndDate
  override def value6 : Integer = getPauseTime
  override def value7 : String = getNotes
  override def value8 : String = getEditingReason
  override def value9 : Integer = getUpdateBy
  override def value10 : LocalDateTime = getCreated
  override def value11 : LocalDateTime = getModified

  override def value1(value : Integer) : ThWorklogRecord = {
    setId(value)
    this
  }

  override def value2(value : Integer) : ThWorklogRecord = {
    setWorklogId(value)
    this
  }

  override def value3(value : Integer) : ThWorklogRecord = {
    setUserId(value)
    this
  }

  override def value4(value : LocalDate) : ThWorklogRecord = {
    setStartDate(value)
    this
  }

  override def value5(value : LocalDate) : ThWorklogRecord = {
    setEndDate(value)
    this
  }

  override def value6(value : Integer) : ThWorklogRecord = {
    setPauseTime(value)
    this
  }

  override def value7(value : String) : ThWorklogRecord = {
    setNotes(value)
    this
  }

  override def value8(value : String) : ThWorklogRecord = {
    setEditingReason(value)
    this
  }

  override def value9(value : Integer) : ThWorklogRecord = {
    setUpdateBy(value)
    this
  }

  override def value10(value : LocalDateTime) : ThWorklogRecord = {
    setCreated(value)
    this
  }

  override def value11(value : LocalDateTime) : ThWorklogRecord = {
    setModified(value)
    this
  }

  override def values(value1 : Integer, value2 : Integer, value3 : Integer, value4 : LocalDate, value5 : LocalDate, value6 : Integer, value7 : String, value8 : String, value9 : Integer, value10 : LocalDateTime, value11 : LocalDateTime) : ThWorklogRecord = {
    this.value1(value1)
    this.value2(value2)
    this.value3(value3)
    this.value4(value4)
    this.value5(value5)
    this.value6(value6)
    this.value7(value7)
    this.value8(value8)
    this.value9(value9)
    this.value10(value10)
    this.value11(value11)
    this
  }

  /**
   * Create a detached, initialised ThWorklogRecord
   */
  def this(id : Integer, worklogId : Integer, userId : Integer, startDate : LocalDate, endDate : LocalDate, pauseTime : Integer, notes : String, editingReason : String, updateBy : Integer, created : LocalDateTime, modified : LocalDateTime) = {
    this()

    set(0, id)
    set(1, worklogId)
    set(2, userId)
    set(3, startDate)
    set(4, endDate)
    set(5, pauseTime)
    set(6, notes)
    set(7, editingReason)
    set(8, updateBy)
    set(9, created)
    set(10, modified)
  }
}
