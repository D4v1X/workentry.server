/*
 * This file is generated by jOOQ.
*/
package models.jooq.tables.daos


import java.lang.Integer
import java.lang.String
import java.time.LocalDateTime
import java.util.List

import javax.annotation.Generated

import models.jooq.tables.TmUser
import models.jooq.tables.records.TmUserRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.9.1"
  ),
  comments = "This class is generated by jOOQ"
)
class TmUserDao(configuration : Configuration) extends DAOImpl[TmUserRecord, models.pojos.TmUser, Integer](TmUser.TM_USER, classOf[models.pojos.TmUser], configuration) {

  /**
   * Create a new TmUserDao without any configuration
   */
  def this() = {
    this(null)
  }

  override protected def getId(o : models.pojos.TmUser) : Integer = {
    o.getId
  }

  /**
   * Fetch records that have <code>id IN (values)</code>
   */
  def fetchById(values : Integer*) : List[models.pojos.TmUser] = {
    fetch(TmUser.TM_USER.ID, values:_*)
  }

  /**
   * Fetch a unique record that has <code>id = value</code>
   */
  def fetchOneById(value : Integer) : models.pojos.TmUser = {
    fetchOne(TmUser.TM_USER.ID, value)
  }

  /**
   * Fetch records that have <code>name IN (values)</code>
   */
  def fetchByName(values : String*) : List[models.pojos.TmUser] = {
    fetch(TmUser.TM_USER.NAME, values:_*)
  }

  /**
   * Fetch records that have <code>email IN (values)</code>
   */
  def fetchByEmail(values : String*) : List[models.pojos.TmUser] = {
    fetch(TmUser.TM_USER.EMAIL, values:_*)
  }

  /**
   * Fetch records that have <code>nif IN (values)</code>
   */
  def fetchByNif(values : String*) : List[models.pojos.TmUser] = {
    fetch(TmUser.TM_USER.NIF, values:_*)
  }

  /**
   * Fetch a unique record that has <code>nif = value</code>
   */
  def fetchOneByNif(value : String) : models.pojos.TmUser = {
    fetchOne(TmUser.TM_USER.NIF, value)
  }

  /**
   * Fetch records that have <code>afiliation_no IN (values)</code>
   */
  def fetchByAfiliationNo(values : String*) : List[models.pojos.TmUser] = {
    fetch(TmUser.TM_USER.AFILIATION_NO, values:_*)
  }

  /**
   * Fetch a unique record that has <code>afiliation_no = value</code>
   */
  def fetchOneByAfiliationNo(value : String) : models.pojos.TmUser = {
    fetchOne(TmUser.TM_USER.AFILIATION_NO, value)
  }

  /**
   * Fetch records that have <code>login_name IN (values)</code>
   */
  def fetchByLoginName(values : String*) : List[models.pojos.TmUser] = {
    fetch(TmUser.TM_USER.LOGIN_NAME, values:_*)
  }

  /**
   * Fetch a unique record that has <code>login_name = value</code>
   */
  def fetchOneByLoginName(value : String) : models.pojos.TmUser = {
    fetchOne(TmUser.TM_USER.LOGIN_NAME, value)
  }

  /**
   * Fetch records that have <code>password IN (values)</code>
   */
  def fetchByPassword(values : String*) : List[models.pojos.TmUser] = {
    fetch(TmUser.TM_USER.PASSWORD, values:_*)
  }

  /**
   * Fetch records that have <code>created IN (values)</code>
   */
  def fetchByCreated(values : LocalDateTime*) : List[models.pojos.TmUser] = {
    fetch(TmUser.TM_USER.CREATED, values:_*)
  }

  /**
   * Fetch records that have <code>modified IN (values)</code>
   */
  def fetchByModified(values : LocalDateTime*) : List[models.pojos.TmUser] = {
    fetch(TmUser.TM_USER.MODIFIED, values:_*)
  }
}
