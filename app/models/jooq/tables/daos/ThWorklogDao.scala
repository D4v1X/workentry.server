/**
 * This class is generated by jOOQ
 */
package models.jooq.tables.daos


import java.lang.Integer
import java.lang.String
import java.time.LocalDate
import java.time.LocalDateTime
import java.util.List

import javax.annotation.Generated

import models.jooq.tables.ThWorklog
import models.jooq.tables.records.ThWorklogRecord

import org.jooq.Configuration
import org.jooq.impl.DAOImpl

import scala.Array


/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.8.6"
  ),
  comments = "This class is generated by jOOQ"
)
class ThWorklogDao(configuration : Configuration) extends DAOImpl[ThWorklogRecord, models.pojos.ThWorklog, Integer](ThWorklog.TH_WORKLOG, classOf[models.pojos.ThWorklog], configuration) {

  /**
   * Create a new ThWorklogDao without any configuration
   */
  def this() = {
    this(null)
  }

  override protected def getId(o : models.pojos.ThWorklog) : Integer = {
    o.getId
  }

  /**
   * Fetch records that have <code>id IN (values)</code>
   */
  def fetchById(values : Integer*) : List[models.pojos.ThWorklog] = {
    fetch(ThWorklog.TH_WORKLOG.ID, values:_*)
  }

  /**
   * Fetch a unique record that has <code>id = value</code>
   */
  def fetchOneById(value : Integer) : models.pojos.ThWorklog = {
    fetchOne(ThWorklog.TH_WORKLOG.ID, value)
  }

  /**
   * Fetch records that have <code>worklog_id IN (values)</code>
   */
  def fetchByWorklogId(values : Integer*) : List[models.pojos.ThWorklog] = {
    fetch(ThWorklog.TH_WORKLOG.WORKLOG_ID, values:_*)
  }

  /**
   * Fetch records that have <code>user_id IN (values)</code>
   */
  def fetchByUserId(values : Integer*) : List[models.pojos.ThWorklog] = {
    fetch(ThWorklog.TH_WORKLOG.USER_ID, values:_*)
  }

  /**
   * Fetch records that have <code>start_date IN (values)</code>
   */
  def fetchByStartDate(values : LocalDate*) : List[models.pojos.ThWorklog] = {
    fetch(ThWorklog.TH_WORKLOG.START_DATE, values:_*)
  }

  /**
   * Fetch records that have <code>end_date IN (values)</code>
   */
  def fetchByEndDate(values : LocalDate*) : List[models.pojos.ThWorklog] = {
    fetch(ThWorklog.TH_WORKLOG.END_DATE, values:_*)
  }

  /**
   * Fetch records that have <code>pause_time IN (values)</code>
   */
  def fetchByPauseTime(values : Integer*) : List[models.pojos.ThWorklog] = {
    fetch(ThWorklog.TH_WORKLOG.PAUSE_TIME, values:_*)
  }

  /**
   * Fetch records that have <code>notes IN (values)</code>
   */
  def fetchByNotes(values : String*) : List[models.pojos.ThWorklog] = {
    fetch(ThWorklog.TH_WORKLOG.NOTES, values:_*)
  }

  /**
   * Fetch records that have <code>editing_reason IN (values)</code>
   */
  def fetchByEditingReason(values : String*) : List[models.pojos.ThWorklog] = {
    fetch(ThWorklog.TH_WORKLOG.EDITING_REASON, values:_*)
  }

  /**
   * Fetch records that have <code>update_by IN (values)</code>
   */
  def fetchByUpdateBy(values : Integer*) : List[models.pojos.ThWorklog] = {
    fetch(ThWorklog.TH_WORKLOG.UPDATE_BY, values:_*)
  }

  /**
   * Fetch records that have <code>created IN (values)</code>
   */
  def fetchByCreated(values : LocalDateTime*) : List[models.pojos.ThWorklog] = {
    fetch(ThWorklog.TH_WORKLOG.CREATED, values:_*)
  }

  /**
   * Fetch records that have <code>modified IN (values)</code>
   */
  def fetchByModified(values : LocalDateTime*) : List[models.pojos.ThWorklog] = {
    fetch(ThWorklog.TH_WORKLOG.MODIFIED, values:_*)
  }
}
